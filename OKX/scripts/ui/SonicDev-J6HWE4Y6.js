import{a as w,b,c as I}from"./chunk-LK7BWEIE.js";import{a as B}from"./chunk-LL63GZNI.js";import"./chunk-M7CL2K7X.js";import{c as T}from"./chunk-5OJTPISL.js";import"./chunk-7UPVX2FL.js";import{a as h}from"./chunk-BSFXZ46S.js";import{e as u,f}from"./chunk-ZMCTBWUY.js";import{W as E,X as S,u as y}from"./chunk-XTEDROPX.js";import"./chunk-G55YEDT5.js";import"./chunk-K24XFWCI.js";import"./chunk-G2266BV2.js";import"./chunk-KUW5VATV.js";import"./chunk-BNAVWOJ2.js";import"./chunk-IG2Q5ALZ.js";import{a as V}from"./chunk-WOMUNWBT.js";import"./chunk-7VFUX7IX.js";import"./chunk-ONKZ57T6.js";import"./chunk-ZC7Q7LCH.js";import{f as P,o as p,q as k}from"./chunk-6KXF36WM.js";p();k();var C=P(V());var l={getAccount:async({provider:n})=>{let a=n?.solana?.publicKey;if(!a){let{publicKey:t}=await n?.solana?.connect({onlyIfTrusted:!0});a=t}return a?.toBase58()},getSolanaConnection:()=>B({SolanaConnection:E,chainId:h.SONIC_DEV}),getLatestBlockhash:async({from:n,to:a,isBlockHashFromRpc:t=!1})=>{let s,e;if(t){let o=await l.getSolanaConnection().getLatestBlockhash();s=o?.blockhash,e=o?.lastValidBlockHeight}else{let r=T(u.GET_SIGNINFO,{address:n,coinId:27500}),o=await f.post(r,{from:n,to:a});s=o?.data?.info?.recentBlockhash,e=o?.data?.info?.lastValidBlockHeight}return{recentBlockhash:s,lastValidBlockHeight:e}},signSolanaTransaction:async({payload:n,feePayer:a})=>{let{transaction:t,bizType:s,bizId:e=[],notReplaceBlockhash:r=!1}=n,o=null,c=()=>typeof n?.toJSON=="function"?n:n?.instruction,{recentBlockhash:i,lastValidBlockHeight:g}=await l.getLatestBlockhash({from:a,isBlockHashFromRpc:e?.length>0}),m=c();return m?(o=new y({feePayer:a,blockhash:i,lastValidBlockHeight:g}).add(m),o.recentBlockhash=i):t&&(r||(t?.version>=0?t.message.recentBlockhash=i:(t.signatures=[],t.recentBlockhash=i,t.lastValidBlockHeight=g),e.forEach(R=>{let A=I(s,R),d=S.fromSeed(A.slice(0,32));t?.version>=0?t.sign([d]):t.partialSign(d)})),o=t),o},signMessage:({provider:n,message:a})=>{let{solana:t}=n||{};return new Promise((s,e)=>{let r=new TextEncoder().encode(a);t.publicKey&&t.signMessage(r,"utf8").then(o=>{let c=Array.prototype.map.call(o.signature,i=>`00${i.toString(16)}`.slice(-2)).join("");s(c)}).catch(o=>{e(o)})})},signAllTransactions:({provider:n,transactions:a})=>new Promise((t,s)=>{n?.solana?.signAllTransactions(a).then(e=>{t(e)}).catch(e=>{s(e)})}),preExecuteTrade:async({address:n,transaction:a})=>{let t;try{t=C.default.encode(a.serialize({requireAllSignatures:!1,verifySignatures:!1}))}catch(e){console.log("preExecuteTrade err: ",e)}if(!t)return Promise.resolve();let[,s]=await b(f.post(u.PRE_EXECUTE_TRADE,{checkTypes:[8],from:n,chainId:h.SONIC_DEV,simulateTransactionParamList:[{sigVerify:!1,replaceRecentBlockhash:!0,transaction:t}]},{timeout:3e4}));if(s){let e=s[0]?.simulateTransactionResultList||[];if(e?.length>0&&!e[0]?.result)throw{code:w.PRE_TRADE,message:e[0]?.msg}}},sendTransaction:async({provider:n,payload:a,cb:t,extraParams:s,address:e})=>async function(){let{solana:r}=n||{},o=await l.signSolanaTransaction({provider:n,payload:a,feePayer:r.publicKey});if(!o)throw new Error("no transaction");s?.isNotNeedPreExecute||l.preExecuteTrade({address:e,transaction:o});try{console.log("solana transaction",o);let{signature:c}=await r.signAndSendTransaction(o,{},s);return t&&t(c),c}catch(c){throw console.log("solana transaction error",c),c}}()},z=l;export{z as default};

window.inOKXExtension = true;
window.inMiniApp = false;
window.ASSETS_BUILD_TYPE = "publish";

//# sourceMappingURL=SonicDev-J6HWE4Y6.js.map
